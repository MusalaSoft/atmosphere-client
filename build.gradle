apply plugin: 'java'
apply plugin: 'maven-publish'

version = '0.0.2'
jar {
    manifest {
        attributes 'Implementation-Title': 'Atmosphere Client',
                   'Implementation-Version': version
    }
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
}

apply plugin: 'java'
apply plugin: 'maven-publish'

dependencies {
    compile 'com.musala.atmosphere:atmosphere-client-server-lib:0.+'
    compile 'com.musala.atmosphere:atmosphere-bitmap-comparison:0.+'
    compile 'com.google.guava:guava:18.0'
    compile 'org.javassist:javassist:3.18.2-GA'
    compile 'org.jsoup:jsoup:1.7.2'
    compile 'org.reflections:reflections:0.9.9-RC1'
    compile 'org.testng:testng:6.9.13.8'

    compile 'org.glassfish.tyrus:tyrus-client:1.13.1'
    compile 'org.glassfish.tyrus:tyrus-container-grizzly-client:1.13.1'

    testCompile 'org.mockito:mockito-all:1.9.5'
    testCompile 'junit:junit:4.12'
}

publishing {
    publications {
        atmosphereClient(MavenPublication) {
            groupId 'com.musala.atmosphere'
            artifactId 'atmosphere-client'
            version version

            from components.java

            // Credit: http://stackoverflow.com/a/32353697/3370842
            pom.withXml {
                // Generate map of resolved versions
                Map resolvedVersionMap = [:]
                Set<ResolvedArtifact> resolvedArtifacts = configurations.compile.getResolvedConfiguration().getResolvedArtifacts()
                resolvedArtifacts.addAll(configurations.testCompile.getResolvedConfiguration().getResolvedArtifacts())
                resolvedArtifacts.each {
                    ModuleVersionIdentifier mvi = it.getModuleVersion().getId();
                    resolvedVersionMap.put("${mvi.getGroup()}:${mvi.getName()}", mvi.getVersion())
                }

                // Update dependencies with resolved versions
                asNode().dependencies.first().each {
                    def groupId = it.get("groupId").first().value().first()
                    def artifactId = it.get("artifactId").first().value().first()
                    it.get("version").first().value = resolvedVersionMap.get("${groupId}:${artifactId}")
                }
            }
        }
    }

    repositories {
        mavenLocal()
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.13'
}

tasks.withType(Test) {
    scanForTestClasses = false
    include "**/*Test.class"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
