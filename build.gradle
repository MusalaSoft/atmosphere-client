// This file is part of the ATMOSPHERE mobile testing framework.
// Copyright (C) 2016 MusalaSoft
//
// ATMOSPHERE is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// ATMOSPHERE is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with ATMOSPHERE.  If not, see <http://www.gnu.org/licenses/>.

apply plugin: 'java'
apply plugin: 'maven-publish'

version = '0.1.0'
jar {
    manifest {
        attributes 'Implementation-Title': 'Atmosphere Client',
                   'Implementation-Version': version
    }
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
}

apply plugin: 'java'
apply plugin: 'maven-publish'

dependencies {
    compile 'com.musala.atmosphere:atmosphere-client-server-lib:0.+'
    compile 'com.musala.atmosphere:atmosphere-bitmap-comparison:0.+'

    compile 'org.testng:testng:6.9.13.8'
    compile 'org.glassfish.tyrus:tyrus-client:1.13.1'
    compile 'org.glassfish.tyrus:tyrus-container-grizzly-client:1.13.1'

    testCompile 'org.mockito:mockito-all:1.9.5'
    testCompile 'junit:junit:4.12'
}

publishing {
    publications {
        atmosphereClient(MavenPublication) {
            groupId 'com.musala.atmosphere'
            artifactId 'atmosphere-client'
            version version

            from components.java

            // Credit: http://stackoverflow.com/a/32353697/3370842
            pom.withXml {
                // Generate map of resolved versions
                Map resolvedVersionMap = [:]
                Set<ResolvedArtifact> resolvedArtifacts = configurations.compile.getResolvedConfiguration().getResolvedArtifacts()
                resolvedArtifacts.addAll(configurations.testCompile.getResolvedConfiguration().getResolvedArtifacts())
                resolvedArtifacts.each {
                    ModuleVersionIdentifier mvi = it.getModuleVersion().getId();
                    resolvedVersionMap.put("${mvi.getGroup()}:${mvi.getName()}", mvi.getVersion())
                }

                // Update dependencies with resolved versions
                asNode().dependencies.first().each {
                    def groupId = it.get("groupId").first().value().first()
                    def artifactId = it.get("artifactId").first().value().first()
                    it.get("version").first().value = resolvedVersionMap.get("${groupId}:${artifactId}")
                }
            }
        }
    }

    repositories {
        mavenLocal()
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.13'
}

tasks.withType(Test) {
    scanForTestClasses = false
    include "**/*Test.class"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
